mesh_generator

(1) Run ./mesh-step1 
    You will see that this will throw an error, because the user provides no input file arguments. 

(2) Run ./mesh-step1 testcases/simple-mesh.txt testcases/simple-mesh.txt
    You will see that this will throw an error, because the user provides too many input file arguments.

(3) Run ./mesh-step1 testcases/input0.txt
    You will see that this will throw an error, because the user provides an input file that does not exist.

(4) Run ./mesh-step1 testcases/input1.txt
    You will see that this will throw an error, becuase the input file has less than the proper number of lines.

(5) Run ./mesh-step1 testcases/input2.txt
    You will see that this will throw an error, because the input file has more than the proper number of lines.

(6) Run ./mesh-step1 testcases/input3.txt
    You will see that this will throw an error, because one of the lines contains a letter. For the sake of not 
    having loads of test cases presented, this test case covers all situations where every line in the code has a 
    character that does not belong in the file (letters, commas, etc.). I made sure to test this myself.

(7) Run ./mesh-step1 testcases/input4.txt
    You will see that this will throw an error, because line 2 (hy) contains more than 1 number. This test case
    also covers the when there is 0 numbers. This is the same for line 1.

(8) Run ./mesh-step1 testcases/input5.txt
    You will see that this will throw an error, because line 3 (first corner x and y coords) contains a third
    number when there should only be an x and y coordinate. This test case covers the case where all corners
    have more OR less numbers.

(9) Run ./mesh-step1 testcases/input6.txt
    This will output the nodes created when the maximum element size is exactly the size of the domain in the 
    x and y direction. This is correct because you can see the 4 nodes created are just the corners of the domain.

(10) Run ./mesh-step1 testcases/input7.txt
    This will output the nodes created when the maximum element size is larger than the size of the domain. This 
    is correct because the maximum element size is adjusted to be the size of the domain in the x and y direction.
    Thus producing the nodes as (9).

(11) Run ./mesh-step1 testcases/input8.txt
    This will output the nodes created when the maximum element size requested in x or y creates elements that would
    the size of the domain. The outputted nodes are correct becuase the maximum element size in x and y is adjusted to
    produce points at regular intervals on the rectangle that do not exceed the maximum element size.

(12) Run ./mesh-step1 testcases/input9.txt
    This will throw an error, because the corners provided fails to create a rectangle. This test covers all combinations
    of corners provided (duplicate corners, quadralaterals that do not form 90 degrees, etc.).

(13) Run ./mesh-step2 testcases/input10.txt
    This will output the nodes and elements of a mesh when the maximum element height produce just nodes at only the corners. 
    Thus when triangulation (of any kind) is called all we can do is create two elements by connecting a diagonal edge. This
    is correct.

(14) Run ./mesh-step2 testcases/simple-mesh.txt
    You can see that for the simple mesh the simple meshing algorithm works well and produces the correct elements. This is
    confirmed by plotting the nodes and elements.

(15) Run ./mesh-step2 testcases/input11.txt
    This will output a mesh for the simple triangulation algorithm for a more refined mesh. By plotting you can confirm this
    is correct.

(16) Run ./mesh-step3 testcases/simple-mesh.txt
    You can see that for the simple mesh the delauney meshing algorithm works well and produces the correct elements. This is
    confirmed by plotting the nodes and elements.

(17) Run ./mesh-step3 testcases/input11.txt
    This will output a mesh for the delauney meshing algorithm for a more refined mesh. By plotting you can confirm this is
    correct.

(18) Run ./mesh-step4 testcases/input11.txt
    For a more refined mesh you can see the the random pertubation of the nodes works well. This is correct and validated by
    plotting the mesh. The method chosen was to pertube the nodes within a circular region defined by a radius which the user
    can provide. This is done at compile time, could be easily modified to be done at run time as an input in the terminal,
    but the instructions wasn't clear on that so I just chose compile time.



